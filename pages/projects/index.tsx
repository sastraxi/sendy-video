import { Box, Flex, Heading, Text, useToast } from "@chakra-ui/react";
import { GetServerSideProps } from "next";
import { User } from "next-auth";
import { getSession } from "next-auth/client";
import Head from "next/head";
import ProjectsTable, {
  ProjectAndSubmissionCount,
  PropTypes as ProjectPropTypes,
} from "../../components/ProjectsTable";
import prisma from "../../utils/db";

import Link from "next/link";
import { Link as ChakraLink } from "@chakra-ui/react";
import { Button } from "@chakra-ui/react";

import SplashContent from "../../components/SplashContent";
import SubmissionsTable, {
  SubmissionAndProject,
} from "../../components/SubmissionsTable";
import { useEffect, useState } from "react";
import styled from "@emotion/styled";

type PropTypes = ProjectPropTypes & {
  submissions: SubmissionAndProject[];
  user: User;
};

// maxW={[200, 400, 600, 800, 1120]}

const STOPS = ["0", "0", "320px", "360px", "460px"];

const Anchor = styled.a`
  text-decoration: none;
  &:hover {
    text-decoration: underline;
  }
`;

export default function ProjectsList(props: PropTypes) {
  const { user } = props;
  const toast = useToast();

  const [projects, updateProjects] = useState<ProjectAndSubmissionCount[]>(
    props.projects
  );
  const [submissions, updateSubmissions] = useState<SubmissionAndProject[]>(
    props.submissions
  );
  const onDeleteSubmission = (submission: SubmissionAndProject) => {
    updateSubmissions(submissions.filter((x) => x.id !== submission.id));
    updateProjects(
      projects.map((p) => {
        if (submission.project.id !== p.id) return p;
        return { ...p, _count: { submissions: p._count!.submissions - 1 } };
      })
    );
    toast({
      title: "Submission deleted.",
      status: "success",
    });
  };
  // XXX: will next.js ever send us a new version of props.submissions? If so, need a useEffect here.

  useEffect(() => {
    const showToast = (type: string, id: number) =>
      toast({
        title: `${type[0].toUpperCase() + type.substr(1)} created.`,
        description: (
          <Text>
            {type === "project" && "You can change settings at any time. "}
            {type === "project" && (
              <Link href={`/projects/${id}`} passHref>
                <Anchor>Edit project</Anchor>
              </Link>
            )}
            {type === "submission" && "Thanks for choosing Sendy!"}
          </Text>
        ),
        status: "success",
        duration: 5000,
      });

    const flashMessage = window.localStorage.getItem("created");
    if (flashMessage) {
      const [type, id] = flashMessage?.split(":");
      showToast(type, +id);
      window.localStorage.removeItem("created");
    }
  }, [toast]);

  const newProjectButton = (
    <Link href="/projects/new" passHref>
      <Button
        colorScheme="teal"
        width="50%"
        minW="200px"
        size="lg"
        boxShadow="0px 12px 28px rgba(0, 0, 0, 0.09)"
      >
        New Project
      </Button>
    </Link>
  );

  return (
    <div>
      <Head>
        <title>Sendy ✈️</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Box width="100vw" height="100vh" overflowY="auto">
        <Flex
          position="fixed"
          width={STOPS}
          left="0"
          top="0"
          bottom="0"
          direction="column"
          p={8}
          pt={24}
          pb={24}
          alignItems="center"
          justifyContent="space-evenly"
          background="teal.100"
          boxShadow="inset 2px 0px 28px rgba(0, 0, 0, 0.09)"
        >
          <SplashContent user={user} content={newProjectButton} />
        </Flex>
        <Flex
          flex={1}
          p={12}
          background="white"
          direction="column"
          position="fixed"
          right="0"
          bottom="0"
          top="0"
          left={STOPS}
          overflowY="auto"
        >
          <Heading size="lg">My projects</Heading>
          <Box mt={4}>
            {projects.length === 0 && <Text>You have no projects.</Text>}
            {projects.length > 0 && <ProjectsTable projects={projects} />}
          </Box>
          {submissions.length > 0 && (
            <>
              <Heading size="lg" mt={8}>
                My submissions
              </Heading>
              <Box mt={4}>
                <SubmissionsTable
                  submissions={submissions}
                  onDelete={onDeleteSubmission}
                />
              </Box>
            </>
          )}
        </Flex>
      </Box>
    </div>
  );
}

export const getServerSideProps: GetServerSideProps = async ({ req }) => {
  const session = await getSession({ req });
  if (!session?.user) {
    return {
      redirect: {
        permanent: false,
        destination: "/",
      },
    };
  }
  const { email } = session.user;
  const projects = await prisma.project.findMany({
    where: {
      userEmail: email!,
    },
    include: {
      _count: {
        select: { submissions: true },
      },
    },
    orderBy: {
      id: "desc", // TODO: order by latest submission, then latest creation date
    },
    take: 5,
  });
  const submissions = await prisma.submission.findMany({
    where: {
      userEmail: email!,
    },
    include: {
      project: true,
    },
    orderBy: {
      id: "desc",
    },
    take: 5,
  });

  const props: PropTypes = {
    projects,
    submissions,
    user: session.user,
  };
  return { props };
};
