import { Box, Flex, Heading, Text } from "@chakra-ui/react";
import { GetServerSideProps } from "next";
import { User } from "next-auth";
import { getSession } from "next-auth/client";
import Head from "next/head";
import ProjectsTable, {
  PropTypes as ProjectPropTypes,
} from "../../components/ProjectsTable";
import prisma from "../../utils/db";

import Link from 'next/link';
import { Button } from '@chakra-ui/react';

import SplashContent from "../../components/SplashContent";

type PropTypes = ProjectPropTypes & {
  user: User;
};

// maxW={[200, 400, 600, 800, 1120]}

export default function ProjectsList({ projects, user }: PropTypes) {
  const newProjectButton = (
    <Link href="/projects/new" passHref>
      <Button
        colorScheme="teal"
        width="50%"
        minW="200px"
        size="lg"
        boxShadow="0px 12px 28px rgba(0, 0, 0, 0.09)"
      >
        New Project
      </Button>
    </Link>
  );

  return (
    <div>
      <Head>
        <title>Sendy ✈️</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Flex direction="row" width="100vw" height="100vh">
        <Flex
          width="30%"
          minW="300px"
          direction="column"
          p={8}
          pt={24}
          pb={24}
          alignItems="center"
          justifyContent="space-evenly"
          background="teal.100"
          boxShadow="inset 2px 0px 28px rgba(0, 0, 0, 0.09)"
        >
          <SplashContent user={user} content={newProjectButton} />
        </Flex>
        <Flex flex={1} p={12} background="white" direction="column">
          <Heading size="lg">My projects</Heading>
          <Box mt={4}>
            {projects.length === 0 && <Text>You have no projects.</Text>}
            {projects.length > 0 && <ProjectsTable projects={projects} />}
          </Box>
        </Flex>
      </Flex>
    </div>
  );
}

export const getServerSideProps: GetServerSideProps = async ({ req }) => {
  const session = await getSession({ req });
  if (!session?.user) {
    return {
      redirect: {
        permanent: false,
        destination: "/",
      },
    };
  }
  const { email } = session.user;
  const projects = await prisma.project.findMany({
    where: {
      userEmail: email!,
    },
    include: {
      _count: {
        select: { submissions: true },
      },
    },
  });
  const props: PropTypes = { projects, user: session.user };
  return { props };
};
