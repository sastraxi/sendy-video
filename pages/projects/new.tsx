import Head from "next/head";
import { getSession } from "next-auth/client";
import { GetServerSideProps } from "next";
import prisma from "../../utils/db";
import { Project } from "@prisma/client";
import Link from 'next/link'

// import { useForm } from "react-hook-form";

type ProjectAndSubmissionCount = Project & {
  _count: {
      submissions: number;
  } | null;
};

type PropTypes = {
  project: ProjectAndSubmissionCount,
  driveLink: string,
};

// type Inputs = {
//   markdown: string,
// }

export default function NewProject(props: PropTypes) {
  // const { register, handleSubmit, watch, formState: { errors } } = useForm();
  // const onSubmit = (data: any) => console.log(data);

  const { project, driveLink } = props;
  return (
    <div>
      <Head>
        <title>sendy ðŸ“· | {project.name}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <h1>sendy ðŸ“· | view project</h1>
        <h2>{project.name}</h2>

        <Link href={driveLink} passHref>
          <button>View on Google Drive</button>
        </Link>

        <textarea>{project.markdown}</textarea>

      </main>
    </div>
  );
}

export const getServerSideProps: GetServerSideProps = async ({ req, query }) => {
  const session = await getSession({ req });
  if (!session?.user) {
    return {
      redirect: {
        permanent: false,
        destination: "/",
      },
    };
  }
  const { projectId } = query
  if (!projectId) {
    return {
      redirect: {
        permanent: false,
        destination: '/projects',
      }
    }
  }
  const { email } = session.user;
  const project = await prisma.project.findFirst({
    where: {
      userEmail: email!,
      id: +projectId,
    },
    include: {
      _count: {
        select: { submissions: true },
      },
    },
  });
  if (!project) {
    return {
      redirect: {
        permanent: false,
        destination: '/projects',
      }
    }
  }
  return { props: { project } };
};
