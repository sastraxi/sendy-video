import Head from "next/head";
import { useRouter } from 'next/router';
import styled from "@emotion/styled";
import { useForm } from "react-hook-form";
import ReactMarkdown from "react-markdown";
import axios from "axios";

import ChakraUIRenderer from 'chakra-ui-markdown-renderer';

import { ProjectFormData } from '../../models';

const Row = styled.div`
  display: flex;
  flex-direction: row;
`;

const Cell = styled.div`
  flex: 1;
`;

const SubCell = styled(Cell)`
  border-left: 10px solid #afafaf;
`;

const MarkdownCell = styled(Cell)`
  max-height: 360px;
  overflow-y: auto;
`;

export default function NewProject(_props: any) {
  const router = useRouter();

  const {
    register,
    handleSubmit,
    watch,
    formState: { errors },
  } = useForm<ProjectFormData>({
    defaultValues: {
      isOpen: true,
      ssoEnforced: true,
      ssoSharedVideos: true,
    },
  });
  const watched = watch(); // TODO: useWatch and sub-components
  const onSubmit = handleSubmit(async (data: ProjectFormData) => {
    if (!data.ssoMaxSubmissions) delete data.ssoMaxSubmissions;
    const response = await axios.post('/api/projects', data);
    const { projectId } = response.data;
    router.push(`/projects/${projectId}`);
  });

  return (
    <div>
      <Head>
        <title>sendy ðŸ“· | new project</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <h1>sendy ðŸ“· | new project</h1>
        <form onSubmit={onSubmit}>
          {/* name */}
          <Row>
            <Cell>
              <label htmlFor="name">Name</label>
              <input
                id="name"
                aria-invalid={errors.name ? "true" : "false"}
                {...register("name", { required: true, maxLength: 30 })}
              />

              {/* use role="alert" to announce the error message */}
              {errors.name && errors.name.type === "required" && (
                <span role="alert">This is required</span>
              )}
              {errors.name && errors.name.type === "maxLength" && (
                <span role="alert">Max length exceeded</span>
              )}
            </Cell>
            <Cell />
          </Row>
          {/* markdown */} {/* markdown preview */}
          <Row>
            <Cell>
              <label htmlFor="markdown">Instructions</label>
              <textarea
                id="markdown"
                aria-invalid={errors.markdown ? "true" : "false"}
                {...register("markdown")}
              />
            </Cell>
            <MarkdownCell>
              {watched.markdown && (
                <ReactMarkdown components={ChakraUIRenderer()}>{watched.markdown}</ReactMarkdown>
              )}
            </MarkdownCell>
          </Row>
          <h2>Submissions</h2>
          <Row>
            <Cell>
              <label htmlFor="isOpen">Open for submissions?</label>
              <input
                id="isOpen"
                type="checkbox"
                aria-invalid={errors.isOpen ? "true" : "false"}
                {...register("isOpen")}
              />
            </Cell>
            <Cell>
              {watched.isOpen && (
                <p>
                  Submissions can be made by visiting{" "}
                  <code>https://sendy.video/p/xxxxxx</code>
                </p>
              )}
              {!watched.isOpen && <p>Noone can make submissions.</p>}
            </Cell>
          </Row>
          <Row>
            <Cell>
              <label htmlFor="ssoEnforced">Require Google SSO?</label>
              <input
                id="ssoEnforced"
                aria-invalid={errors.ssoEnforced ? "true" : "false"}
                type="checkbox"
                {...register("ssoEnforced")}
              />
            </Cell>
            <Cell>
              {!watched.ssoEnforced && (
                <p>Warning: anyone with the link can make video submissions!</p>
              )}
            </Cell>
          </Row>
          {watched.ssoEnforced && (
            <Row>
              <SubCell>
                <label htmlFor="ssoMaxSubmissions">
                  Maximum submissions per login
                </label>
                <input
                  id="ssoMaxSubmissions"
                  aria-invalid={errors.ssoMaxSubmissions ? "true" : "false"}
                  type="numeric"
                  {...register("ssoMaxSubmissions", {
                    setValueAs: v => v ? parseInt(v) : '',
                    min: 1,
                  })}
                />
              </SubCell>
              <Cell>
                {!watched.ssoMaxSubmissions && (
                  <p>Users can submit an unlimited number of submissions.</p>
                )}
              </Cell>
            </Row>
          )}
          {watched.ssoEnforced && (
            <Row>
              <SubCell>
                <label htmlFor="ssoSharedVideos">
                  Store videos in submitter&apos;s account
                </label>
                <input
                  id="ssoSharedVideos"
                  aria-invalid={errors.ssoSharedVideos ? "true" : "false"}
                  type="checkbox"
                  {...register("ssoSharedVideos")}
                />
              </SubCell>
              <Cell>
                {!watched.ssoSharedVideos && (
                  <p>
                    Warning: users will upload videos directly to your drive!
                    You take responsibility for what is uploaded to your
                    account.
                  </p>
                )}
              </Cell>
            </Row>
          )}
          {watched.ssoEnforced && (
            <Row>
              <SubCell>
                <label htmlFor="ssoDomain">
                  Restrict to domain 
                </label>
                <input
                  id="ssoDomain"
                  aria-invalid={errors.ssoDomain ? "true" : "false"}
                  {...register("ssoDomain")}
                />
              </SubCell>
              <Cell>
                {watched.ssoDomain && (
                  <p>
                    Users must have an account whose email address ends with
                    {' '}
                    <code>@{watched.ssoDomain}</code>
                    {' '}
                    in order to login.
                  </p>
                )}
              </Cell>
            </Row>
          )}

          <h2>Limits</h2>
          {/* [ ] current / <max> submissions */}
          {/* [ ] current / <max> gb */} {/* only your drive */}
          {/* automatically closes at <yyyy-mm-ddthh:mm:ss> --> need tokens to prevent frustration */}

          <input type="submit" />
        </form>
      </main>
    </div>
  );
}
