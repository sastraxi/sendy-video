// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["selectRelationCount", "orderByRelation"]
}

model Account {
  id                   String    @id @default(cuid())
  userId               String
  providerType         String
  providerId           String
  providerAccountId    String
  refreshToken         String?
  accessToken          String?
  accessTokenExpires   DateTime? // unusable: https://github.com/nextauthjs/adapters/issues/48
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  user                 User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
  @@unique([providerId, userId])
}

// because accessTokenExpires is unusable and the callback we have
// fires *before* Account is created, we need to store the expiration
// timestamp of each access token we get out-of-band
model AccessToken {
  token     String @id
  expiresAt DateTime?
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  rootFileId    String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  submissions   Submission[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Project {
  id                 Int             @id @default(autoincrement())
  userEmail          String
  name               String
  markdown           String?

  isOpen             Boolean
  magicCode          String          @unique
  folderFileId       String?
  folderWebLink      String?

  ssoEnforced        Boolean         @default(false)
  ssoMaxSubmissions  Int?
  ssoSharedVideos    Boolean         @default(true)
  ssoDomain          String?

  maxSubmissions      Int?
  maxSubmissionBytes  Int?
  maxSubmissionLength Int?
  maxBytesTotal       Int?
  closesAt            DateTime?

  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  user               User            @relation(fields: [userEmail], references: [email])
  submissions        Submission[]
}

model Submission {
  id          Int     @id @default(autoincrement())
  projectId   Int
  fileSize    Int
  userEmail   String?
  email       String?
  title       String
  updateToken String  @default(uuid())
  fileId      String?
  webLink     String?
  metadata    Json

  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt @default(now())
  project     Project @relation(fields: [projectId], references: [id])
  user        User?   @relation(fields: [userEmail], references: [email])
}
